<style lang="scss">
    
    .search{
        &_wrap{

        }
        &_input{
            $height: 86rpx;
            height: $height;
            background-color: #f0f0f0;
            position: relative;
            overflow: hidden;
            font-size: 24rpx;
            i{
                width: 24rpx;
                height: 24rpx;
                font-size: 24rpx;
                margin-top: -16rpx;
                position: absolute;
                left: 6%; top: 50%;
            }
            input {
                width: 90%;
                height: $height - 20;
                margin: 8rpx auto;
                
                padding-left: 1.5em;
                box-sizing: border-box;
                border: 1px solid #ccc;
                background-color: #fff;
                border-radius: 8rpx;
            }
        }
        &_words{

        }
        &_title{
            line-height: 58rpx;
            padding: 0 30rpx;
            font-size: 28rpx;
            overflow: hidden;
            .tit{
                float: left;
            }
            .del{
                width: 48rpx;
                height: 48rpx;
                line-height: 48rpx;
                margin-top: 5rpx;
                font-size: 24rpx;
                text-align: center;
                color: #999;
                border-radius: 50%;
                background: #dedede;
                float: right;
            }
        }
        &_text_cont{
            display: flex;
            padding: 12rpx 30rpx 0;
            flex-wrap: wrap;
            text{
                padding: 8rpx 20rpx;
                border: 1px solid #dedede;
                font-size: 24rpx;
                margin-right: 12rpx;
                margin-bottom: 12rpx;
                border-radius: 8rpx;
            }
        }
    }


    .container {
        height: 100%;
        box-sizing: border-box;
    }
    @font-face {
        font-family: "iconfont";
        src: url('data:application/x-font-woff;charset=utf-8;base64,') format('woff');
    }
    .iconfont {
        font-family:"iconfont" !important;
        font-size: inherit;
        font-style:normal;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }

    .icon-jia1:before { content: "\e641"; }

    .icon-jian1:before { content: "\e608"; }

    .icon-xianshimiaosha2:before { content: "\e6a4"; }

    .icon-xianshimiaosha1:before { content: "\e601"; }

    .icon-miaosha:before { content: "\e62d"; }

    .icon-xianshimiaosha2:before { content: "\e6a4"; }

    .icon-fenxiang:before { content: "\e629"; }

    .icon-search:before { content: "\e645"; }

    .icon-wancheng:before { content: "\e60e"; }

    .icon-xiangshang:before { content: "\e627"; }

    .icon-tupianliebiao:before { content: "\e69e"; }

    .icon-liebiao:before { content: "\e88f"; }

    .icon-triangle-bottom:before { content: "\e62b"; }

    .icon-triangle-top:before { content: "\e635"; }

    .icon-jian:before { content: "\e74b"; }

    .icon-jia:before { content: "\e623"; }

    .icon-dizhi:before { content: "\e603"; }

    .icon-fenlei:before { content: "\e607"; }

    .icon-shibaibiaoqing:before { content: "\e638"; }

    .icon-daifukuan01:before { content: "\e626"; }

    .icon-wode:before { content: "\e66e"; }

    .icon-yiwanchengdingdan:before { content: "\e625"; }

    .icon-kefu:before { content: "\e61b"; }

    .icon-gouwuche1:before { content: "\e61a"; }

    .icon-duigou:before { content: "\e64d"; }

    .icon-xiazai9:before { content: "\e622"; }

    .icon-chenggong:before { content: "\e617"; }

    .icon-dianhua:before { content: "\e69a"; }

    .icon-shanchu:before { content: "\e642"; }

    .icon-daishouhuo:before { content: "\e600"; }

    .icon-shuangjiantou:before { content: "\e624"; }

    .icon-lib:before { content: "\e628"; }

    .icon-quanbudingdan:before { content: "\e62e"; }

    .icon-home:before { content: "\e7ec"; }

    .icon-shouhuodizhi:before { content: "\e644"; }

    .icon-home-copy:before { content: "\e7ed"; }

    .icon-gouwuche-copy:before { content: "\e7ee"; }

    .icon-wode-copy:before { content: "\e7ef"; }

    .icon-fenlei-copy:before { content: "\e7f0"; }
</style>

<template>
    <view class="search_wrap">
        <view class="search_input">
            <i class="iconfont icon-search"></i>
            <input name="text" type="text" placeholder="{{placeholder}}" confirm-type="search" value="" auto-focus @blur="inputBlur" @confirm="searchSubmit" />
            
            
        </view>

        <repeat for="{{words}}" item="item">
            <view calss="search_words">
                <view class="search_title">
                    <text class="tit">{{item.title}}:</text>
                    <text class="del iconfont icon-shanchu"
                          wx:if="{{item.name == 'history'}}" @tap="del"></text>
                </view>
                <view class="search_text_cont">
                    
                    <repeat for="{{item.words}}" item="i">
                        <text @tap="Goto" data-name="{{i}}">{{i}}</text>
                    </repeat>

                </view> 
            </view>

        </repeat>

    </view>
</template>

<script>

    import wepy from 'wepy'
    import getExtJson from '../assets/getExtJson'
    export default class Search extends wepy.page{
        config = {
            "navigationBarTitleText": "搜索"
        }
        data = {
            placeholder: '请输入关键字',
            words: [
                {
                    title: '热门搜索',
                    name: 'hot',
                    words: [
                        '苹果',
                        '香蕉',
                        '香水梨',
                        '椰子',
                        '甘蔗',
                        '菠萝',
                        '冬枣'
                    ]
                },
                {
                    title: '历史搜索',
                    name: 'history',
                    words: [

                    ]
                }
            ]
        }
        methods = {
            Goto(e){
                let name = e.currentTarget.dataset.name
                wepy.navigateTo({
                    url: `searchInfo?name=${name}`
                })
            },
            del(){
                wepy.removeStorageSync('searchHistory')
                this.words[1].words = []
                this.$apply()
            },
            inputBlur(e){
                // 暂时没有用
            },
            searchSubmit(e){
                console.log(e.detail.value)
                let val = e.detail.value
                let searchHistory = wepy.getStorageSync('searchHistory') || []
                if(val){
                    for(let i = 0, I = searchHistory.length; i < I; i++)
                        if(searchHistory[i] == val) searchHistory.splice(i, 1)

                    searchHistory.unshift(val)
                    this.words[1].words = searchHistory
                    wepy.setStorageSync('searchHistory', searchHistory)
                    this.$apply()
                    
                }

                    let name = e.detail.value
                    wepy.navigateTo({
                        url: `searchInfo?name=${name}`
                    })

            }
        }
        getsearch() {
            wx.request({
                url: `${this.api_host}/restapi/repast-product-search-counts`,
                data: {
                    config_id: this.config_id,
                },
                success: (res) => {
                    this.words[0].words.length = 0
                    const data = res.data.data.items.map((item) => {
                        return item.spwords
                    })
                    this.words[0].words.push.apply(this.words[0].words,data)
                    this.$apply()
                }
            })
        }
        onShareAppMessage() {

        }
        onLoad(){
            this.words[1].words = wepy.getStorageSync('searchHistory')
            getExtJson.call(this)
            this.getsearch()
            this.$apply()
        }
    }

</script>


